{"meta":{"title":"Code Jingles","subtitle":null,"description":null,"author":"Jiwon","url":"http://JiwonYeom.github.io"},"pages":[],"posts":[{"title":"Github Pages With Hexo","slug":"GithubPages-Hexo","date":"2017-10-08T10:36:03.000Z","updated":"2017-10-08T11:24:32.141Z","comments":true,"path":"2017/10/08/GithubPages-Hexo/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/GithubPages-Hexo/","excerpt":"","text":"Get your Github Pages Looking Fancy with HexoAfter around 2 full months of keeping up TIL repository, I’ve FINALLY managed to move on to Github Pages. There were several thresholds for me before, which were I was not used to Markdowns. I had troubles understanding how Github Pages hosts my blog built on Hexo. I know these might sound strange, but yeah I guess I didn’t have enough knowledge on how things work on web in terms of build-deploy processes.So here goes som explanations for those of you who are starting off with Github Pages+Hexo Github PagesThis is super simple. Just create a repository with the name of [your-username].github.io. After that, just move on with Hexo set up. HexoThis is an awesome tool that automatically sets up your Github Pages to work like a blog with Markdown files as postings. Initial set up comes with simple commands:12345678910// install hexonpm install hexo-cli -g// init your blog. 'blog' here is just a name, so you can change it.hexo init blog// get into your blog directorycd blog// install bundlesnpm install// run your blog on node server, which will run on http://localhost:4000hexo server Now when you can confirm it running on localhost, continue with settings.You can see settings in _config.yml.You have to change some variables here. Here’s sample for what I customized: 123456title: Code Jinglessubtitle:description:author: Jiwonlanguage: entimezone: Asia/Seoul You also need to set Theme and Deploy, but I’ll get back to it later. Now go ahead and find some theme that you’d like to use from Hexo’s theme page.Usually, the themes will provide you sufficient directions to apply it.For me, I chose Hueman and customized it a bit.Mostly, it involves git clone command and changing theme in your blog/_config.yml file. 1theme: hueman After that, customize the theme as you like. For me, I even edited some part of style files and layout file so that I can use text instead of image for my logo. I chose one from google font (full of awesome fonts!).I added my part of customization as custom.styl file, and imported it into style.styl. First time using Styl and it was interesting to try new stuff. Check it out here. When you are done, most important part now - create a first post! The command:1hexo new [title] Please refert to official Docs for full explanation. This command will create new .md file in your blog/source/_posts directory. You just have to write things in that file. Most important part - how to make this markdown file into a webpage? These markdowns are not directly taken into your website - it will not look all pretty and nice in markdown format. You need to convert it into HTML file. But how?Hexo does it. Two important commands:12hexo generatehexo deploy First command will turn your added files and assets needed for your blog into static files. For example, your markdown file will be turned into html file so that it will look nice and organized for visitors of your blog.This includes files like css, js.. etc.Please refer here for further understanding in generate command. You can always check changes to your blog by hexo server command before actually generating the files. Finally, that you are done with static files, you need to push them to your web server - which is your github repository. You don’t do this with your usual git push kind of method. Hexo does this for you too. With hexo deploy, it will automatically push the changes into your repository. But you need to set up deploy methods first in your blog/_config.yml file.I’ll show you how to set it up with Github, but it supports other services too. Please see here. 12cd blognpm install hexo-deployer-git --save Then in your _.config.yml, 12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] # This is usually 'master' unless you changed branch message: [message] # I excluded this option If you have set everything correctly, it should deploy your blog to Github Pages automatically and generate the blog.This may take few moments to actually be observable, so please be patient :) And that’s it!It’s simple but could be difficult for those who are not used to web deployment and markdowns. Hopefully this helps for those who’s struggling with Hexo.","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://JiwonYeom.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://JiwonYeom.github.io/tags/Blog/"}]},{"title":"Symfony Review-2","slug":"symfony-review-2","date":"2017-10-08T10:16:05.000Z","updated":"2017-10-08T10:58:01.543Z","comments":true,"path":"2017/10/08/symfony-review-2/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/symfony-review-2/","excerpt":"","text":"Reviews on Trying out Symfony(2)DoctrineSymfony does not have core component that works with Databases. Instead, it uses third-party library called Doctrine.Doctrine allows building database schema through Entity Class, retrieving it, and more.Symfony commands through bin/console can connect to various functionalities of Doctrine. Trailing \\ ProblemSymfony routing will cause 401 error when there is a trailing slash in the url. To solve it, you should add additional controller for redirections as shown here. 123456789101112131415161718// src/AppBundle/Controller/RedirectingController.phpnamespace AppBundle\\Controller;use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;use Symfony\\Component\\HttpFoundation\\Request;class RedirectingController extends Controller&#123; public function removeTrailingSlashAction(Request $request) &#123; $pathInfo = $request-&gt;getPathInfo(); $requestUri = $request-&gt;getRequestUri(); $url = str_replace($pathInfo, rtrim($pathInfo, ' /'), $requestUri); return $this-&gt;redirect($url, 301); &#125;&#125;","categories":[{"name":"PHP","slug":"PHP","permalink":"http://JiwonYeom.github.io/categories/PHP/"}],"tags":[{"name":"Symfony","slug":"Symfony","permalink":"http://JiwonYeom.github.io/tags/Symfony/"},{"name":"PHP","slug":"PHP","permalink":"http://JiwonYeom.github.io/tags/PHP/"},{"name":"Framework","slug":"Framework","permalink":"http://JiwonYeom.github.io/tags/Framework/"}]},{"title":"Symfony Review-1","slug":"symfony-review-1","date":"2017-10-08T10:16:02.000Z","updated":"2017-10-08T10:58:16.504Z","comments":true,"path":"2017/10/08/symfony-review-1/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/symfony-review-1/","excerpt":"","text":"Reviews on Trying out Symfony(1)I have been trying out Symfony today, and while I was working on it, I faced some difficulties and issues.I decided to leave some progress review on this. Installing SymfonyThis is simple if you follow the official guide. But one thing to remember: symfony command might NOT work if you don’t turn off &amp; on your terminal. Mine didn’t. If your command doesn’t work, turn your terminal off &amp; on again. symfony new [projectName] Should be enough to create your new project. Do NOT forget to change your root in nginx.conf file (If you are doing this on a nginx web server). The consoleSymfony can be managed by its own console and its commands, such as running its server or checking status, etc. Useful commands12345//check routed url listphp bin/console debug:router//refresh cache php bin/console cache:clear --env=prod File Directory src-AppBundle contains Controller. Resources-views contains view files.Which are two main places where you might want to begin. Twig engineSymfony uses html twig engine for its view as long as I have seen. I skimmed through the configs, and it seems like different rendering engine can be chosen, but this is interesting for me. So far, PHP frameworks that I used had plain HTMLs as its view templates. RoutingRouting is quite different from that of CI or Drupal, which are frameworks that I am familiar with. It uses a sort of annotation, which looks like the following123/** * @Route(&quot;/happy/name&quot;) */ This defines url pattern. But I think the file name and controller / function names are correlated since I got many errors while trying to get this work, and it seemed like the file name and function names must be right.This might be a mistake, so I’ll try to update if it turns out differently. Unresolved Issues (trying to find out) I am having issues (or this might not be an issue) with cache. From the beginning, when I was trying to see if my page has changed after changing some parts in index.html.twig, it didn’t change.Newly added controller wasn’t recognized too, until I did this: php bin/console cache:clear –no-warmup –env=prod I’m not sure if this is something that I must do every time I do some changes. There might be some way, so I’ll keep on searching. DebuggingIt said debugging toolbar should show up, but I haven’t seen it yet :(I think I might have set up something wrong, and trying to figure this out.update!==&gt; I found this out. My website seems like it’s on a production mode instead of development mode. I accessed app_dev.php by explicitly using its url, and the bar showed up.I think this is because of my web server setting, which is not the built-in php server. I’ll have to check up a bit more. Dev &amp; ProdI think Symfony divides these two quite strictly. I’m still trying to find out the exact mechanism, but there are two files -app.php and app_dev.php. While I was setting up nginx.conf, it also separated these two environments, which is good. But I should take more in-depth look to see exact settings and usages. Memory issueWhile I was trying to install FOS\\rest-bundle, I encountered memory issue. Allocated memory exceeded, so I tried to increase the memory_limit parameter in php.ini file to 1G, but it didn’t work.I though there might be another issue, but today I tried it again by putting -1 as its value. As a result, the memory alert was gone but now I had allocation exception in Composer. This was solved after I entered few commands suggested here","categories":[{"name":"PHP","slug":"PHP","permalink":"http://JiwonYeom.github.io/categories/PHP/"}],"tags":[{"name":"Symfony","slug":"Symfony","permalink":"http://JiwonYeom.github.io/tags/Symfony/"},{"name":"PHP","slug":"PHP","permalink":"http://JiwonYeom.github.io/tags/PHP/"},{"name":"Framework","slug":"Framework","permalink":"http://JiwonYeom.github.io/tags/Framework/"}]},{"title":"BEM Introduction-2","slug":"bem-2","date":"2017-10-08T10:00:02.000Z","updated":"2017-10-08T10:57:15.326Z","comments":true,"path":"2017/10/08/bem-2/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/bem-2/","excerpt":"","text":"BEM - File Structure, naming conventions and CSS1. File Structure Single block = single directory. Block and directory shares name. block’s implementation is divided into separate technology files (css &amp; js) block directory is root for subdirectories of elements &amp; modifiers (ex. button, input, text.. etc) Element directory names begin with double underscore(__) Names of modifier directories begin with single underscore. implementation of elements &amp; modifiers are divided into different technology files. 2. CSS Making HTML wrapper HTML wrapper? used for 1) Relatively positioning HTML elements 2) Position element within a section use mixes. Mixes allows combining behavior and styles of multiple entities. create additional block element no additional abstract wrapper. 12345&lt;!-- 'profile' block --&gt;&lt;section class=\"profile\"&gt; &lt;div class=\"organization profile__organization\"&gt;&lt;/div&gt; &lt;div class=\"photobox profile__photobox\"&gt;&lt;/div&gt;&lt;/div&gt; 123456.profile__organization &#123; padding-top: 20px;&#125;.profile__photobox &#123; padding-top: 10px;&#125; +Paddings/margins to top / to bottom is often defined since it is not affected by responsiveness to a great degree, but horizontal padding / margin should be rethought before use.","categories":[{"name":"HTML&CSS","slug":"HTML-CSS","permalink":"http://JiwonYeom.github.io/categories/HTML-CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://JiwonYeom.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://JiwonYeom.github.io/tags/CSS/"},{"name":"BEM","slug":"BEM","permalink":"http://JiwonYeom.github.io/tags/BEM/"}]},{"title":"BEM Introduction-1","slug":"bem-1","date":"2017-10-08T10:00:01.000Z","updated":"2017-10-08T10:57:26.776Z","comments":true,"path":"2017/10/08/bem-1/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/bem-1/","excerpt":"","text":"BEM - Key ConceptsReference to here Component-based approach to web development divide UI into blocks easier interface development reusable code without copy &amp; pasting 1. Block Represented by CLASS attribute name describes its PURPOSE Component encapsulates behaviors, templates, styles, etc. Should NOT influence the environment. Do not set margin, padding, postion, etc. No CSS tag / ID selectors. Nested structure. Arbitrary placement : blocks should be able to move around the page without modifying CSS / JavaScript Reuse by creating instances 2. Element name describes its PURPOSE naming rule: block-name__element-name. NESTING : Even if they are nested, they are all part of a BLOCK, not an ELEMENT. (block-name_elment-name__element-name &lt;= not allowed). If this is needed (elements under element), use service block instead. MEMBERSHIP : element is ALWAYS a part of a block. Optional 3. Modifier Describes its APPEARANCE, STATE, and BEHAVIOR. Separated from block / element name by a single _. Cannot be used alone. Use it alongside block / element class Types: Boolean: when presence / absence of modifier is important &amp; value unimportant. Key-value: when modifier value is important. Defines appearance and behavior of a block / an element. optional Similar to HTML attr can change during runtime 4. BEM entity Blocks, elements, and modifiers 5. Mix An instance of different BEM entities on a single DOM node. combines behaviors &amp; styles of several entities without code duplication create semantically new interface component on the basis of existing entities.1234&lt;div class=\"header\"&gt; &lt;!-- mix of block 'search-form' and element 'header__search-form' --&gt; &lt;div class=\"search-form header__search-form\"&gt;&lt;/div&gt;&lt;/div&gt; 6. BEM tree DOM tree written in BEM entities","categories":[{"name":"HTML&CSS","slug":"HTML-CSS","permalink":"http://JiwonYeom.github.io/categories/HTML-CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://JiwonYeom.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://JiwonYeom.github.io/tags/CSS/"},{"name":"BEM","slug":"BEM","permalink":"http://JiwonYeom.github.io/tags/BEM/"}]},{"title":"Domain & DNS","slug":"Domain-DNS","date":"2017-10-08T09:46:01.000Z","updated":"2017-10-08T09:52:14.530Z","comments":true,"path":"2017/10/08/Domain-DNS/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/Domain-DNS/","excerpt":"","text":"Moved From TIL post For those of you who have absolutely NO IDEA about the website url - like I was (and still partially am) - This is a simple guide. Urls are made out of protocol part and resource name part. Domains are, as you could assume, unique. You should visit domain provider (there are tons out there), and purchase one after searching your wanted domain pattern. When you access an website, actually 2 things happen 1) your agent(PC, mobile, tablet… whatever) ask for certain domain, 2)DNS responds to you with matching IP address. This means, even though what you see in the address bar in your browser is familiar http://www.something.com, this is just something that YOU see, not what browser actually visits. When we visit website, its always towards its IP, not the letters you see (domains). (add explanation later) in short: the web addresses you see and the actual thing that runs the website are COMPLETELY detached. They are just mapped by DNS. What is DNS then? This is also called name server. As its name suggests, it stores your domain and corresponding IP. There are many, many name servers out there, and they are hierarchical. Some name servers are named Root Servers, and they handle massive network of name servers. By forming networks and hierarchy, your website address query will travel through the network until it gets back the right IP address. So it makes sense if ALL the name servers that have your domain and host(the server that carries website contents - simple version of seeing it) dies, you won’t be able to access that website with web address.Also, if the IP address changes and web address does not match with that IP address anymore in the registered DNS, it won’t be accessible anymore. Things are easier if you think of the name of website and the contents container of the website as two separate thing.","categories":[{"name":"Network","slug":"Network","permalink":"http://JiwonYeom.github.io/categories/Network/"}],"tags":[{"name":"DNS","slug":"DNS","permalink":"http://JiwonYeom.github.io/tags/DNS/"},{"name":"Domain","slug":"Domain","permalink":"http://JiwonYeom.github.io/tags/Domain/"},{"name":"Network","slug":"Network","permalink":"http://JiwonYeom.github.io/tags/Network/"},{"name":"Beginner","slug":"Beginner","permalink":"http://JiwonYeom.github.io/tags/Beginner/"}]},{"title":"TIL to blog","slug":"TIL-to-blog","date":"2017-10-08T09:24:20.000Z","updated":"2017-10-08T09:32:41.074Z","comments":true,"path":"2017/10/08/TIL-to-blog/","link":"","permalink":"http://JiwonYeom.github.io/2017/10/08/TIL-to-blog/","excerpt":"","text":"Moving from TIL repository to BlogSo I am moving away from TIL repository to a blog, where I can just store random thoughts and code snippets.I’ll still use Medium for a longer, polished articles but I thought Github Pages would be better for displaying my TIL contents. So far my TIL contents have been randomly stacked in the TIL repository, but I found this rather visually not appealing. I also found myself writing quite long texts when I explain some stuffs, so blog is probably a better space to do it.","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"http://JiwonYeom.github.io/tags/blog/"},{"name":"TIL","slug":"TIL","permalink":"http://JiwonYeom.github.io/tags/TIL/"}]}]}